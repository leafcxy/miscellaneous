<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="Roles" xmlns="http://ibatis.apache.org/mapping" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <!--别名-->
  <alias>
    <typeAlias alias="Roles" type="LeaveWord.Domain.user.Roles, LeaveWord.Domain" />
  </alias>
  <!--缓存模型-->
  <cacheModels>
    <cacheModel id="RolesCache" implementation="MEMORY">
      <flushInterval hours="24"/>
      <flushOnExecute statement="Roles.AddRoles"/>
      <flushOnExecute statement="Roles.UpdateRoles"/>
      <flushOnExecute statement="Roles.DeleteRoles"/>
      <flushOnExecute statement="Roles.DeleteRoless"/>
      <property name="Type" value="WEAK"/>
    </cacheModel>
  </cacheModels>
  <!--字段映射-->
  <resultMaps>
    <resultMap id="RolesResult" class="Roles">
      <result property="RoleId" column="RoleId"/>
      <result property="RoleName" column="RoleName"/>
    </resultMap>
  </resultMaps>
  <statements>
    <!--新增-->
    <insert id="AddRoles" parameterClass="Roles">
      INSERT INTO Roles (RoleName)
      VALUES ( #RoleName#)

      <!--插入数据之后，model对象的主属性得到自增主键的新值-->
      <selectKey resultClass="int" type="post" property="RoleId">
        SELECT @@IDENTITY AS value
      </selectKey>

    </insert>
    <!--修改-->
    <update id="UpdateRoles" parameterClass="Roles">
      UPDATE Roles SET RoleName = #RoleName#
      WHERE RoleId = #RoleId#
    </update>
    <!--根据条件语句whereSql获取所有对象-->
    <select id="GetAllRolesBySql" resultMap="RolesResult" parameterClass="string"  cacheModel="RolesCache">
      SELECT RoleId,RoleName
      FROM Roles
      $whereSql$
    </select>
    <!--获取多条-->
    <select id="GetRoless" resultMap="RolesResult" parameterClass="Roles" cacheModel="RolesCache">
      select Roles.RoleId,Roles.RoleName
      from Roles
      where 1=1
      <include refid="WhrClauseEqual" />
    </select>
    <!--获取数据条数-->
    <select id="GetRolesCount" resultClass="int" parameterClass="string">
      select COUNT(RoleId)
      from Roles
      $whereSql$
    </select>
    <!--获取多条-->
    <select id="FindRoless" resultMap="RolesResult" parameterClass="Hashtable" cacheModel="RolesCache">
      select Roles.RoleId,Roles.RoleName
      from Roles
      where 1=1
      <include refid="WhrClauseEqual" />
      <isNotEmpty property="Extends" prepend="and">
        <iterate property="Extends" conjunction="or" open="(" close=")">
          (1=1 and Roles.RoleId=#Extends[].RoleId#)
        </iterate>
      </isNotEmpty>
    </select>
    <!--删除-->
    <delete id="DeleteRoles" parameterClass="Roles">
      DELETE FROM Roles
      where 1=1
      <include refid="WhrClauseEqual" />
    </delete>
    <!--根据条件语句whereSql批量删除-->
    <delete id="BatchDeleteRolesBySql" parameterClass="string">
      DELETE FROM Roles
      $whereSql$
    </delete>
    <!--删除多条-->
    <delete id="DeleteRoless" parameterClass="List">
      DELETE FROM Roles
      where 1!=1
      <iterate prepend="or" conjunction="," open="RoleId IN(" close=")">
        $[]$
      </iterate>
    </delete>
    <!--精确查询条件-->
    <sql id="WhrClauseEqual">
      <dynamic>
        <isNotNull property="RoleId">
          <isGreaterEqual property="RoleId" compareValue="0" prepend="and">
            Roles.RoleId=#RoleId#
          </isGreaterEqual>
        </isNotNull>

        <isNotEmpty property="RoleName" prepend="and">
          UPPER(Roles.RoleName)=UPPER(#RoleName#)
        </isNotEmpty>
      </dynamic>
    </sql>
  </statements>
</sqlMap>
